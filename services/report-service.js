const moment = require('moment');
const fs = require('fs');
const path = require('path');
const config = require('../config');

class ReportService {
    constructor() {
        this.reportTemplate = this.loadTemplate();
        this.userReports = new Map();
    }

    loadTemplate() {
        try {
            const templatePath = path.join(__dirname, '../templates/report-template.txt');
            return fs.readFileSync(templatePath, 'utf8');
        } catch (error) {
            return `URGENT: WhatsApp Terms of Service Violation Report

Report Reference: WRB-{timestamp}
Date: {date}
Time: {timestamp}

REPORTED WHATSAPP NUMBER:
Phone Number: {number}
Country Code: {countryCode}

VIOLATION CATEGORY:
{category}

INCIDENT DETAILS:
{description}

REQUESTED ACTION:
- Immediate investigation
- Account review and possible suspension

COMPLIANCE NOTES:
This report is submitted in good faith based on observed violations.

---
Generated by WhatsApp Mass Reporter Bot`;
        }
    }

    canUserReport(userId) {
        const userData = this.userReports.get(userId) || { count: 0, lastReport: 0 };
        const now = Date.now();
        
        if (now - userData.lastReport > config.REPORT_COOLDOWN) {
            userData.count = 0;
        }

        return userData.count < config.MAX_REPORTS_PER_HOUR;
    }

    generateReportTemplate(reportData) {
        const {
            phoneNumber,
            countryCode = 'Not specified',
            category,
            description,
            reporterContact = 'Anonymous'
        } = reportData;

        if (!this.isValidPhoneNumber(phoneNumber)) {
            throw new Error('Invalid phone number format');
        }

        const reportContent = this.reportTemplate
            .replace(/{number}/g, phoneNumber)
            .replace(/{countryCode}/g, countryCode)
            .replace(/{category}/g, category)
            .replace(/{description}/g, description)
            .replace(/{reporterContact}/g, reporterContact)
            .replace(/{date}/g, moment().format('YYYY-MM-DD'))
            .replace(/{timestamp}/g, moment().format('YYYY-MM-DD HH:mm:ss'));

        return {
            content: reportContent,
            subject: `URGENT: WhatsApp Abuse Report - ${phoneNumber} - ${category}`,
            email: config.WHATSAPP_SUPPORT_EMAIL,
            phoneNumber,
            category
        };
    }

    updateUserReportCount(userId, count) {
        const userData = this.userReports.get(userId) || { count: 0, lastReport: 0 };
        userData.count += count;
        userData.lastReport = Date.now();
        this.userReports.set(userId, userData);
    }

    getUserReportStats(userId) {
        const userData = this.userReports.get(userId) || { count: 0, lastReport: 0 };
        const now = Date.now();
        
        return {
            reportsToday: userData.count,
            lastReport: userData.lastReport ? new Date(userData.lastReport) : null,
            canReport: this.canUserReport(userId),
            remaining: Math.max(0, config.MAX_REPORTS_PER_HOUR - userData.count)
        };
    }

    isValidPhoneNumber(phoneNumber) {
        const phoneRegex = /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\./0-9]*$/;
        return phoneRegex.test(phoneNumber) && phoneNumber.replace(/\D/g, '').length >= 8;
    }
}

module.exports = ReportService;
